"use strict"; var _excluded = ["endValue"]; function ownKeys(c, d) { var a = Object.keys(c); if (Object.getOwnPropertySymbols) { var b = Object.getOwnPropertySymbols(c); d && (b = b.filter(function (a) { return Object.getOwnPropertyDescriptor(c, a).enumerable })), a.push.apply(a, b) } return a } function _objectSpread(c) { for (var a = 1; a < arguments.length; a++) { var b = null != arguments[a] ? arguments[a] : {}; a % 2 ? ownKeys(Object(b), !0).forEach(function (a) { _defineProperty(c, a, b[a]) }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(c, Object.getOwnPropertyDescriptors(b)) : ownKeys(Object(b)).forEach(function (a) { Object.defineProperty(c, a, Object.getOwnPropertyDescriptor(b, a)) }) } return c } function _defineProperty(a, b, c) { return b in a ? Object.defineProperty(a, b, { value: c, enumerable: !0, configurable: !0, writable: !0 }) : a[b] = c, a } function _objectWithoutProperties(a, d) { if (null == a) return {}; var b, c, e = _objectWithoutPropertiesLoose(a, d); if (Object.getOwnPropertySymbols) { var f = Object.getOwnPropertySymbols(a); for (c = 0; c < f.length; c++)b = f[c], !(d.indexOf(b) >= 0) && Object.prototype.propertyIsEnumerable.call(a, b) && (e[b] = a[b]) } return e } function _objectWithoutPropertiesLoose(c, f) { if (null == c) return {}; var a, b, d = {}, e = Object.keys(c); for (b = 0; b < e.length; b++)a = e[b], f.indexOf(a) >= 0 || (d[a] = c[a]); return d } function _classCallCheck(a, b) { if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function") } function _defineProperties(d, c) { for (var b = 0; b < c.length; b++) { var a = c[b]; a.enumerable = a.enumerable || !1, a.configurable = !0, "value" in a && (a.writable = !0), Object.defineProperty(d, a.key, a) } } function _createClass(a, b, c) { return b && _defineProperties(a.prototype, b), c && _defineProperties(a, c), a } var docReady = function (a) { "loading" === document.readyState ? document.addEventListener("DOMContentLoaded", a) : setTimeout(a, 1) }, isRTL = function () { return "rtl" === document.querySelector("html").getAttribute("dir") }, resize = function (a) { return window.addEventListener("resize", a) }, isIterableArray = function (a) { return Array.isArray(a) && !!a.length }, camelize = function (a) { if (a) { var b = a.replace(/[-_\s.]+(.)?/g, function (_, a) { return a ? a.toUpperCase() : "" }); return "".concat(b.substr(0, 1).toLowerCase()).concat(b.substr(1)) } }, getData = function (a, b) { try { return JSON.parse(a.dataset[camelize(b)]) } catch (c) { return a.dataset[camelize(b)] } }, hexToRgb = function (b) { c = 0 === b.indexOf("#") ? b.substring(1) : b; var c, a = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(c.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, function (d, a, b, c) { return a + a + b + b + c + c })); return a ? [parseInt(a[1], 16), parseInt(a[2], 16), parseInt(a[3], 16)] : null }, rgbaColor = function () { var a = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "#fff", b = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : .5; return "rgba(".concat(hexToRgb(a), ", ").concat(b, ")") }, getColor = function (a) { var b = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : document.documentElement; return getComputedStyle(b).getPropertyValue("--sparrow-".concat(a)).trim() }, getColors = function (a) { return { primary: getColor("primary", a), secondary: getColor("secondary", a), success: getColor("success", a), info: getColor("info", a), warning: getColor("warning", a), danger: getColor("danger", a), light: getColor("light", a), dark: getColor("dark", a) } }, getSoftColors = function (a) { return { primary: getColor("soft-primary", a), secondary: getColor("soft-secondary", a), success: getColor("soft-success", a), info: getColor("soft-info", a), warning: getColor("soft-warning", a), danger: getColor("soft-danger", a), light: getColor("soft-light", a), dark: getColor("soft-dark", a) } }, getGrays = function (a) { return { white: getColor("white", a), 100: getColor("100", a), 200: getColor("200", a), 300: getColor("300", a), 400: getColor("400", a), 500: getColor("500", a), 600: getColor("600", a), 700: getColor("700", a), 800: getColor("800", a), 900: getColor("900", a), 1e3: getColor("1000", a), 1100: getColor("1100", a), black: getColor("black", a) } }, hasClass = function (a, b) { return a.classList.value.includes(b) }, addClass = function (a, b) { a.classList.add(b) }, getOffset = function (b) { var a = b.getBoundingClientRect(), c = window.pageXOffset || document.documentElement.scrollLeft, d = window.pageYOffset || document.documentElement.scrollTop; return { top: a.top + d, left: a.left + c } }, isScrolledIntoView = function (a) { for (var b = a.offsetTop, c = a.offsetLeft, d = a.offsetWidth, e = a.offsetHeight; a.offsetParent;)b += (a = a.offsetParent).offsetTop, c += a.offsetLeft; return { all: b >= window.pageYOffset && c >= window.pageXOffset && b + e <= window.pageYOffset + window.innerHeight && c + d <= window.pageXOffset + window.innerWidth, partial: b < window.pageYOffset + window.innerHeight && c < window.pageXOffset + window.innerWidth && b + e > window.pageYOffset && c + d > window.pageXOffset } }, isElementIntoView = function (b) { var a = b.getBoundingClientRect(); if (a.top >= 0 && a.bottom <= window.innerHeight || a.top < window.innerHeight && a.bottom >= 0) return !0 }, breakpoints = { xs: 0, sm: 576, md: 768, lg: 992, xl: 1200 }, getBreakpoint = function (a) { var b, c = a && a.classList.value; return c && (b = breakpoints[c.split(" ").filter(function (a) { return a.includes("navbar-expand-") }).pop().split("-").pop()]), b }, getCurrentScreenBreakpoint = function () { var a = ""; a = window.innerWidth >= breakpoints.xl ? "xl" : window.innerWidth >= breakpoints.lg ? "lg" : window.innerWidth >= breakpoints.md ? "md" : "sm"; var b = breakpoints[a]; return { currentBreakpoint: a, breakpointStartVal: b } }, setCookie = function (b, c, d) { var a = new Date; a.setTime(a.getTime() + d), document.cookie = "".concat(b, "=").concat(c, ";expires=").concat(a.toUTCString()) }, getCookie = function (b) { var a = document.cookie.match("(^|;) ?".concat(b, "=([^;]*)(;|$)")); return a ? a[2] : a }, settings = { tinymce: { theme: "oxide" }, chart: { borderColor: "rgba(255, 255, 255, 0.8)" } }, newChart = function (a, b) { var c = a.getContext("2d"); return new window.Chart(c, b) }, getItemFromStore = function (a, b) { var c = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : localStorage; try { return JSON.parse(c.getItem(a)) || b } catch (d) { return c.getItem(a) || b } }, setItemToStore = function (a, b) { var c = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : localStorage; return c.setItem(a, b) }, getStoreSpace = function () { var a = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : localStorage; return parseFloat((escape(encodeURIComponent(JSON.stringify(a))).length / 1048576).toFixed(2)) }, getDates = function (a, b) { var c = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 864e5; return Array.from({ length: (b - a) / c + 1 }, function (d, b) { return new Date(a.valueOf() + c * b) }) }, getPastDates = function (a) { switch (a) { case "week": c = 7; break; case "month": c = 30; break; case "year": c = 365; break; default: c = a }var c, b = new Date, d = b, e = new Date(new Date().setDate(b.getDate() - (c - 1))); return getDates(e, d) }, getRandomNumber = function (a, b) { return Math.floor(Math.random() * (b - a) + a) }, utils = { docReady: docReady, resize: resize, isIterableArray: isIterableArray, camelize: camelize, getData: getData, hasClass: hasClass, addClass: addClass, hexToRgb: hexToRgb, rgbaColor: rgbaColor, getColor: getColor, getColors: getColors, getSoftColors: getSoftColors, getGrays: getGrays, getOffset: getOffset, isScrolledIntoView: isScrolledIntoView, getBreakpoint: getBreakpoint, setCookie: setCookie, getCookie: getCookie, newChart: newChart, settings: settings, getItemFromStore: getItemFromStore, setItemToStore: setItemToStore, getStoreSpace: getStoreSpace, getDates: getDates, getPastDates: getPastDates, getRandomNumber: getRandomNumber, getCurrentScreenBreakpoint: getCurrentScreenBreakpoint, breakpoints: breakpoints, isElementIntoView: isElementIntoView, isRTL: isRTL }, detectorInit = function () { var b = window.is, a = document.querySelector("html"); b.opera() && addClass(a, "opera"), b.mobile() && addClass(a, "mobile"), b.firefox() && addClass(a, "firefox"), b.safari() && addClass(a, "safari"), b.ios() && addClass(a, "ios"), b.iphone() && addClass(a, "iphone"), b.ipad() && addClass(a, "ipad"), b.ie() && addClass(a, "ie"), b.edge() && addClass(a, "edge"), b.chrome() && addClass(a, "chrome"), b.mac() && addClass(a, "osx"), b.windows() && addClass(a, "windows"), navigator.userAgent.match("CriOS") && addClass(a, "chrome") }, DomNode = function () { function a(b) { _classCallCheck(this, a), this.node = b } return _createClass(a, [{ key: "addClass", value: function (a) { this.isValidNode() && this.node.classList.add(a) } }, { key: "removeClass", value: function (a) { this.isValidNode() && this.node.classList.remove(a) } }, { key: "toggleClass", value: function (a) { this.isValidNode() && this.node.classList.toggle(a) } }, { key: "hasClass", value: function (a) { this.isValidNode() && this.node.classList.contains(a) } }, { key: "data", value: function (a) { if (this.isValidNode()) try { return JSON.parse(this.node.dataset[this.camelize(a)]) } catch (b) { return this.node.dataset[this.camelize(a)] } return null } }, { key: "attr", value: function (a) { return this.isValidNode() && this.node[a] } }, { key: "setAttribute", value: function (a, b) { this.isValidNode() && this.node.setAttribute(a, b) } }, { key: "removeAttribute", value: function (a) { this.isValidNode() && this.node.removeAttribute(a) } }, { key: "setProp", value: function (a, b) { this.isValidNode() && (this.node[a] = b) } }, { key: "on", value: function (a, b) { this.isValidNode() && this.node.addEventListener(a, b) } }, { key: "isValidNode", value: function () { return !!this.node } }, { key: "camelize", value: function (b) { var a = b.replace(/[-_\s.]+(.)?/g, function (_, a) { return a ? a.toUpperCase() : "" }); return "".concat(a.substr(0, 1).toLowerCase()).concat(a.substr(1)) } }]), a }(), anchors = new window.AnchorJS; anchors.options = { icon: "#" }, anchors.add("[data-anchor]"); var isotopeInit = function () { var b = { ISOTOPE_ITEM: ".isotope-item", DATA_ISOTOPE: "[data-isotope]", DATA_FILTER: "[data-filter]", DATA_FILTER_NAV: "[data-filter-nav]" }, c = { ISOTOPE: "isotope" }, d = { ACTIVE: "active" }; if (window.Isotope) { var a = document.querySelectorAll(b.DATA_ISOTOPE); a.length && a.forEach(function (a) { window.imagesLoaded(a, function () { a.querySelectorAll(b.ISOTOPE_ITEM).forEach(function (a) { a.style.visibility = "visible" }); var f = utils.getData(a, c.ISOTOPE), g = { itemSelector: b.ISOTOPE_ITEM, layoutMode: "packery" }, h = window._.merge(g, f), i = new window.Isotope(a, h), e = document.querySelector(b.DATA_FILTER_NAV); return null == e || e.addEventListener("click", function (a) { var c = a.target.dataset.filter; i.arrange({ filter: c }), document.querySelectorAll(b.DATA_FILTER).forEach(function (a) { a.classList.remove(d.ACTIVE) }), a.target.classList.add(d.ACTIVE) }), i }) }) } }, bgPlayerInit = function () { var b = { DATA_YOUTUBE_EMBED: "[data-youtube-embed]", YT_VIDEO: ".yt-video" }, e = { YOUTUBE_EMBED: "youtube-embed" }, f = { LOADED: "loaded" }, a = { SCROLL: "scroll", LOADING: "loading", DOM_CONTENT_LOADED: "DOMContentLoaded" }, g = document.querySelectorAll(b.DATA_YOUTUBE_EMBED), c = function () { var a = document.createElement("script"); a.src = "https://www.youtube.com/iframe_api"; var c = document.getElementsByTagName("script")[0]; c.parentNode.insertBefore(a, c), a.onload = function () { window.YT.ready(function () { g.forEach(function (c) { var d = utils.getData(c, e.YOUTUBE_EMBED), a = window._.merge({ videoId: "hLpy-DRuiz0", startSeconds: 1, endSeconds: 50 }, d); new YT.Player(c, { videoId: a.videoId, playerVars: { autoplay: 1, disablekb: 1, controls: 0, modestbranding: 1, loop: 1, fs: 0, enablejsapi: 0, start: null == a ? void 0 : a.startSeconds, end: null == a ? void 0 : a.endSeconds }, events: { onReady: function (a) { a.target.mute(), a.target.playVideo() }, onStateChange: function (c) { c.data === window.YT.PlayerState.PLAYING && document.querySelectorAll(b.DATA_YOUTUBE_EMBED).forEach(function (a) { a.classList.add(f.LOADED) }), c.data === window.YT.PlayerState.PAUSED && c.target.playVideo(), c.data === window.YT.PlayerState.ENDED && c.target.seekTo(a.startSeconds) } } }) }) }) } }; document.readyState !== a.LOADING ? c() : document.addEventListener(a.DOM_CONTENT_LOADED, function () { return c() }); var d = function () { document.querySelectorAll(b.YT_VIDEO).forEach(function (d) { var a = d, b = a.parentElement.offsetWidth + 200, c = a.parentElement.offsetHeight + 112; a.style.width = "".concat(b, "px"), a.style.height = "".concat(9 * b / 16, "px"), a.style.minHeight = "".concat(c, "px"), a.style.minWidth = "".concat(16 * c / 9, "px") }) }; d(), document.addEventListener(a.SCROLL, function () { return d() }) }, bootstrapNavbarInit = function () { var a = document.querySelector(".navbar-sparrow"); if (a) { var c = window.innerHeight, b = function () { var b = window.pageYOffset / c * 2; b >= 1 && (b = 1), a.style.backgroundColor = "rgba(0, 0, 0, ".concat(b, ")") }; b(), document.addEventListener("scroll", function () { return b() }), a.addEventListener("show.bs.collapse", function (a) { a.currentTarget.classList.toggle("bg-black") }), a.addEventListener("hide.bs.collapse", function (a) { a.currentTarget.classList.toggle("bg-black") }) } }, countdownInit = function () { document.querySelectorAll("[data-countdown]").forEach(function (b) { var c = b, a = utils.getData(c, "countdown"), d = new Date("".concat(null == a ? void 0 : a.month, " ", "".concat(null == a ? void 0 : a.date, ","), " ").concat(a.year)).getTime(), e = setInterval(function () { var b = new Date().getTime(), a = d - b; c.innerHTML = "".concat(Math.floor(a / 864e5), " days ").concat("0".concat(Math.floor(a % 864e5 / 36e5)).toString().slice(-2), ":").concat("0".concat(Math.floor(a % 36e5 / 6e4)).toString().slice(-2), ":").concat("0".concat(Math.floor(a % 6e4 / 1e3)).toString().slice(-2)), a < 0 && (clearInterval(e), c.innerHTML = "EXPIRED") }, 10) }) }, countupInit = function () { window.countUp && document.querySelectorAll("[data-countup]").forEach(function (b) { var a = utils.getData(b, "countup"), d = a.endValue, e = _objectWithoutProperties(a, _excluded), f = !1, c = function () { if (utils.isElementIntoView(b) && !f) { var a = new window.countUp.CountUp(b, d, _objectSpread({ duration: 3, useEasing: !1 }, e)); a.error ? console.error(a.error) : a.start(), f = !0 } }; c(), window.addEventListener("scroll", function () { return c() }) }) }, Selector = { DATA_ZANIM_SVG_TRIGGER: "data-zanim-svg-trigger", DATA_ZANIM_REPEAT: "[zanim-repeat]", PATH: "path", ZANIM_SVG: "zanim-svg" }, Events = { SCROLL: "scroll" }, drawSvgInit = function () { var b = function (b) { var c = b.querySelector(Selector.PATH), a = Object.assign({ delay: 0, duration: 2, ease: "Expo.easeOut" }, utils.getData(b, Selector.ZANIM_SVG)); window.gsap.timeline().from(c, a.duration, { drawSVG: 0, delay: a.delay, ease: a.ease }), window.gsap.set(c, { visibility: "visible" }) }, a = function () { document.querySelectorAll("[".concat(Selector.DATA_ZANIM_SVG_TRIGGER, "]")).forEach(function (a) { utils.isElementIntoView(a) && a.hasAttribute(Selector.DATA_ZANIM_SVG_TRIGGER) && (b(a), document.querySelector(Selector.DATA_ZANIM_REPEAT) || a.removeAttribute(Selector.DATA_ZANIM_SVG_TRIGGER)) }) }; a(), window.addEventListener(Events.SCROLL, function () { return a() }) }, fancyNavInit = function () { var l = { SHOW: "show", PLAY: "play", COLLAPSED: "collapsed", FANCYNAVBAR_LEFT: "fancynavbar-left", FANCYNAVBAR_TOP: "fancynavbar-top" }, a = { FANCYNAVBAR: ".fancynavbar", FANCYNAVBAR_LEFT: ".fancynavbar-left", FANCYNAVBAR_TOGGLERBAR: ".fancynavbar-togglerbar", FANCYNAVBAR_BRAND_IMG: ".fancynavbar-brand-img", FANCYNAVBAR_ADDON: ".fancynavbar-addon", FANCYNAVBAR_COLLAPSE: ".fancynavbar-collapse", FANCYNAVBAR_TOGGLER: ".fancynavbar-toggler", FANCYNAVBAR_TOGGLER_ICON: ".fancynavbar-toggler-icon", PATH_TOP: "#path-top", PATH_MIDDLE: "#path-middle", PATH_BOTTOM: "#path-bottom", FANCYNAV_LINK: ".fancynav-link", FANCY_DROPDOWN: ".fancy-dropdown", FANCY_DROPDOWN_MENU: ".fancy-dropdown-menu", FANCY_DROPDOWN_TOGGLE: ".fancy-dropdown-toggle", FANCY_DROPDOWN_ITEM: ".fancy-dropdown-item", DATA_ONE_PAGE: "[data-one-page]" }, m = { ZANIM_XS: "data-zanim-xs", ZANIM_MD: "data-zanim-md", ZANIM_LG: "data-zanim-lg", EXCLUSIVE: "data-exclusive" }, i = { CLICK: "click", SCROLL: "scroll", RESIZE: "resize" }, d = "CubicBezier", b = document.querySelector(a.FANCYNAVBAR), e = null == b ? void 0 : b.classList.contains(l.FANCYNAVBAR_LEFT), t = null == b ? void 0 : b.classList.contains(l.FANCYNAVBAR_TOP); if ((utils.isRTL() || e) && !(utils.isRTL() && e)) { var u = document.querySelector(a.FANCYNAVBAR_BRAND_IMG), v = document.querySelector(a.FANCYNAVBAR_TOGGLER_ICON), w = document.querySelector(a.FANCYNAVBAR_ADDON), f = function (b) { var a = JSON.parse(b.getAttribute(m.ZANIM_LG)); a.from.x = -a.from.x; var c = JSON.stringify(a); b.setAttribute(m.ZANIM_LG, c) }; f(b), f(u), f(v), f(w) } if (t) { var n = document.querySelector(a.FANCYNAVBAR_BRAND_IMG), x = document.querySelector(a.FANCYNAVBAR_TOGGLER_ICON), o = document.querySelector(a.FANCYNAVBAR_ADDON), g = function (a, b) { var c = JSON.stringify(b); a.setAttribute(m.ZANIM_LG, c) }, p = function (a, c) { var b = JSON.parse(a.getAttribute(m.ZANIM_LG)); b.from.y = -c; var d = JSON.stringify(b); a.setAttribute(m.ZANIM_LG, d) }, j = JSON.parse(b.getAttribute(m.ZANIM_XS)), q = _objectSpread(_objectSpread({}, j), {}, { delay: .4 }), y = _objectSpread(_objectSpread({}, j), {}, { delay: .5 }); g(b, j), g(n, q), p(n, 38), g(x, q), g(o, y), p(o, 30) } if (b) { var z = document.querySelector(a.FANCYNAVBAR_COLLAPSE), A = document.querySelector(a.FANCYNAVBAR_TOGGLER), M = document.querySelector("[".concat(m.EXCLUSIVE, "]")), r = "100%"; (utils.isRTL() || e) && !(utils.isRTL() && e) && (r = "-100%"); var B = window.gsap.timeline().pause(), C = document.querySelectorAll("".concat(a.FANCYNAV_LINK, ", ").concat(a.FANCY_DROPDOWN_MENU)); B.fromTo(z, .6, { x: r }, { x: "0%", ease: d }).staggerFromTo(Array.from(C), .8, { y: 56, opacity: 0 }, { y: 0, opacity: 1, ease: d }, .05, "-=0.4"); var D = window.gsap.timeline().pause(), k = document.querySelector(a.FANCYNAVBAR_TOGGLER_ICON), E = k.querySelector(a.PATH_TOP), F = k.querySelector(a.PATH_MIDDLE), G = k.querySelector(a.PATH_BOTTOM); D.fromTo(E, .5, { "stroke-dashoffset": "0", "stroke-dasharray": "30px 88px" }, { "stroke-dashoffset": "-81px", delay: 0, ease: d }, 0).fromTo(F, .5, { "stroke-dashoffset": "0", "stroke-dasharray": "30px 30px" }, { "stroke-dashoffset": "-15px", "stroke-dasharray": "0.1px 30px", delay: 0, ease: d }, 0).fromTo(G, .5, { "stroke-dashoffset": "-87.9px", "stroke-dasharray": "30px 88.1px" }, { "stroke-dashoffset": "-6.3px", delay: 0, ease: d }, 0); var H = function () { k.classList.contains(l.PLAY) ? D.reverse() : D.play(), k.classList.toggle(l.PLAY), A.classList.contains(l.COLLAPSED) ? B.reverse() : B.play(), A.classList.toggle(l.COLLAPSED) }; A.addEventListener(i.CLICK, H), document.querySelector("main").addEventListener(i.CLICK, function () { A.classList.contains(l.COLLAPSED) && H() }); var s = document.querySelectorAll(a.FANCY_DROPDOWN_MENU); s.length && (s.forEach(function (c) { var b = c, d = "".concat(b.previousElementSibling.offsetHeight, "px"); b.closest(a.FANCY_DROPDOWN).style.height = d }), window.resize(function () { document.querySelectorAll(a.FANCY_DROPDOWN).forEach(function (c) { var b = c; if (b.classList.contains(l.SHOW)) { var d = "".concat(b.querySelector(a.FANCY_DROPDOWN_MENU).offsetHeight, "px"); b.style.height = d } else b.style.height = "".concat(b.offsetHeight, "px") }) })); var I = document.querySelectorAll(a.FANCYNAV_LINK); I.forEach(function (b) { b.addEventListener(i.CLICK, function (i) { var b = i.target; if (b.closest(a.DATA_ONE_PAGE)) H(); else { var f, g = window.gsap.timeline().pause(), c = b.closest(a.FANCY_DROPDOWN_TOGGLE), h = null == c ? void 0 : c.nextElementSibling, j = null == h ? void 0 : h.querySelectorAll(a.FANCY_DROPDOWN_ITEM), k = Array.from(j); g.staggerFromTo(k, .3, { y: 30, opacity: 0 }, { y: 0, opacity: 1, ease: d }, .01).delay(.1); var e = null == b ? void 0 : b.closest(a.FANCY_DROPDOWN); if (null == e || null === (f = e.classList) || void 0 === f || f.toggle(l.SHOW), b.closest(a.FANCY_DROPDOWN).classList.contains(l.SHOW) ? (e.style.height = "".concat(c.offsetHeight + c.nextElementSibling.offsetHeight, "px"), g.play()) : (g.reverse(), e.style.height = "".concat(c.offsetHeight, "px")), M) { var m = b.closest(a.FANCY_DROPDOWN); document.querySelectorAll(a.FANCY_DROPDOWN).forEach(function (b) { var a = b; a !== m && (a.style.height = "".concat(c.offsetHeight, "px"), a.classList.remove(l.SHOW)) }) } } }) }); var h = document.querySelector(a.FANCYNAVBAR_TOGGLERBAR), J = utils.getData(h, "onscroll-fade-in"), N = window.getComputedStyle(h).backgroundColor, O = h.classList.value.split(" ").filter(function (a) { return 0 === a.indexOf("bg-") })[0]; if (J) { var c = window.getComputedStyle(h).backgroundColor; "transparent" === c && (c = "rgb(0, 0, 0)"), -1 === c.indexOf("a") && (c = c.replace(")", ", 1)").replace("rgb", "rgba")); var K = c.split(", ")[3].split(")")[0]; 0 === window.pageYOffset && (K = 0); var P = b.classList.value.split(" ").filter(function (a) { return 0 === a.indexOf("fancynavbar-expand") })[0].split("fancynavbar-expand-")[1], L = function () { var d = window.innerHeight; if (window.innerWidth > utils.breakpoints[P]) O && h.classList.add(O), h.style.backgroundColor = "".concat(N.replace("rgba", "rgb").split(",").slice(0, 3).join(), ")"); else { h.classList.remove(O); var a = c.split(", "), b = a.join(); h.style.backgroundColor = b; var e = function () { window.innerWidth < utils.breakpoints[P] && ((K = window.pageYOffset / d * 2) >= 1 && (K = 1), a[3] = "".concat(K, ")"), b = a.join(), h.style.backgroundColor = b) }; document.addEventListener(i.SCROLL, function () { return e() }) } }; L(), window.addEventListener(i.RESIZE, function () { return L() }) } } }; function initMap() { var b = document.body, a = document.querySelectorAll("[data-gmap]"); if (a.length && window.google) { var c = { Default: [{ featureType: "water", elementType: "geometry", stylers: [{ color: "#e9e9e9" }, { lightness: 17 }] }, { featureType: "landscape", elementType: "geometry", stylers: [{ color: "#f5f5f5" }, { lightness: 20 }] }, { featureType: "road.highway", elementType: "geometry.fill", stylers: [{ color: "#ffffff" }, { lightness: 17 }] }, { featureType: "road.highway", elementType: "geometry.stroke", stylers: [{ color: "#ffffff" }, { lightness: 29 }, { weight: .2 }] }, { featureType: "road.arterial", elementType: "geometry", stylers: [{ color: "#ffffff" }, { lightness: 18 }] }, { featureType: "road.local", elementType: "geometry", stylers: [{ color: "#ffffff" }, { lightness: 16 }] }, { featureType: "poi", elementType: "geometry", stylers: [{ color: "#f5f5f5" }, { lightness: 21 }] }, { featureType: "poi.park", elementType: "geometry", stylers: [{ color: "#dedede" }, { lightness: 21 }] }, { elementType: "labels.text.stroke", stylers: [{ visibility: "on" }, { color: "#ffffff" }, { lightness: 16 }] }, { elementType: "labels.text.fill", stylers: [{ saturation: 36 }, { color: "#333333" }, { lightness: 40 }] }, { elementType: "labels.icon", stylers: [{ visibility: "off" }] }, { featureType: "transit", elementType: "geometry", stylers: [{ color: "#f2f2f2" }, { lightness: 19 }] }, { featureType: "administrative", elementType: "geometry.fill", stylers: [{ color: "#fefefe" }, { lightness: 20 }] }, { featureType: "administrative", elementType: "geometry.stroke", stylers: [{ color: "#fefefe" }, { lightness: 17 }, { weight: 1.2 }] }], Gray: [{ featureType: "all", elementType: "labels.text.fill", stylers: [{ saturation: 36 }, { color: "#000000" }, { lightness: 40 }] }, { featureType: "all", elementType: "labels.text.stroke", stylers: [{ visibility: "on" }, { color: "#000000" }, { lightness: 16 }] }, { featureType: "all", elementType: "labels.icon", stylers: [{ visibility: "off" }] }, { featureType: "administrative", elementType: "geometry.fill", stylers: [{ color: "#000000" }, { lightness: 20 }] }, { featureType: "administrative", elementType: "geometry.stroke", stylers: [{ color: "#000000" }, { lightness: 17 }, { weight: 1.2 }] }, { featureType: "landscape", elementType: "geometry", stylers: [{ color: "#000000" }, { lightness: 20 }] }, { featureType: "poi", elementType: "geometry", stylers: [{ color: "#000000" }, { lightness: 21 }] }, { featureType: "road.highway", elementType: "geometry.fill", stylers: [{ color: "#000000" }, { lightness: 17 }] }, { featureType: "road.highway", elementType: "geometry.stroke", stylers: [{ color: "#000000" }, { lightness: 29 }, { weight: .2 }] }, { featureType: "road.arterial", elementType: "geometry", stylers: [{ color: "#000000" }, { lightness: 18 }] }, { featureType: "road.local", elementType: "geometry", stylers: [{ color: "#000000" }, { lightness: 16 }] }, { featureType: "transit", elementType: "geometry", stylers: [{ color: "#000000" }, { lightness: 19 }] }, { featureType: "water", elementType: "geometry", stylers: [{ color: "#000000" }, { lightness: 17 }] }], Midnight: [{ featureType: "all", elementType: "labels.text.fill", stylers: [{ color: "#ffffff" }] }, { featureType: "all", elementType: "labels.text.stroke", stylers: [{ color: "#000000" }, { lightness: 13 }] }, { featureType: "administrative", elementType: "geometry.fill", stylers: [{ color: "#000000" }] }, { featureType: "administrative", elementType: "geometry.stroke", stylers: [{ color: "#144b53" }, { lightness: 14 }, { weight: 1.4 }] }, { featureType: "landscape", elementType: "all", stylers: [{ color: "#08304b" }] }, { featureType: "poi", elementType: "geometry", stylers: [{ color: "#0c4152" }, { lightness: 5 }] }, { featureType: "road.highway", elementType: "geometry.fill", stylers: [{ color: "#000000" }] }, { featureType: "road.highway", elementType: "geometry.stroke", stylers: [{ color: "#0b434f" }, { lightness: 25 }] }, { featureType: "road.arterial", elementType: "geometry.fill", stylers: [{ color: "#000000" }] }, { featureType: "road.arterial", elementType: "geometry.stroke", stylers: [{ color: "#0b3d51" }, { lightness: 16 }] }, { featureType: "road.local", elementType: "geometry", stylers: [{ color: "#000000" }] }, { featureType: "transit", elementType: "all", stylers: [{ color: "#146474" }] }, { featureType: "water", elementType: "all", stylers: [{ color: "#021019" }] }], Hopper: [{ featureType: "water", elementType: "geometry", stylers: [{ hue: "#165c64" }, { saturation: 34 }, { lightness: -69 }, { visibility: "on" }] }, { featureType: "landscape", elementType: "geometry", stylers: [{ hue: "#b7caaa" }, { saturation: -14 }, { lightness: -18 }, { visibility: "on" }] }, { featureType: "landscape.man_made", elementType: "all", stylers: [{ hue: "#cbdac1" }, { saturation: -6 }, { lightness: -9 }, { visibility: "on" }] }, { featureType: "road", elementType: "geometry", stylers: [{ hue: "#8d9b83" }, { saturation: -89 }, { lightness: -12 }, { visibility: "on" }] }, { featureType: "road.highway", elementType: "geometry", stylers: [{ hue: "#d4dad0" }, { saturation: -88 }, { lightness: 54 }, { visibility: "simplified" }] }, { featureType: "road.arterial", elementType: "geometry", stylers: [{ hue: "#bdc5b6" }, { saturation: -89 }, { lightness: -3 }, { visibility: "simplified" }] }, { featureType: "road.local", elementType: "geometry", stylers: [{ hue: "#bdc5b6" }, { saturation: -89 }, { lightness: -26 }, { visibility: "on" }] }, { featureType: "poi", elementType: "geometry", stylers: [{ hue: "#c17118" }, { saturation: 61 }, { lightness: -45 }, { visibility: "on" }] }, { featureType: "poi.park", elementType: "all", stylers: [{ hue: "#8ba975" }, { saturation: -46 }, { lightness: -28 }, { visibility: "on" }] }, { featureType: "transit", elementType: "geometry", stylers: [{ hue: "#a43218" }, { saturation: 74 }, { lightness: -51 }, { visibility: "simplified" }] }, { featureType: "administrative.province", elementType: "all", stylers: [{ hue: "#ffffff" }, { saturation: 0 }, { lightness: 100 }, { visibility: "simplified" }] }, { featureType: "administrative.neighborhood", elementType: "all", stylers: [{ hue: "#ffffff" }, { saturation: 0 }, { lightness: 100 }, { visibility: "off" }] }, { featureType: "administrative.locality", elementType: "labels", stylers: [{ hue: "#ffffff" }, { saturation: 0 }, { lightness: 100 }, { visibility: "off" }] }, { featureType: "administrative.land_parcel", elementType: "all", stylers: [{ hue: "#ffffff" }, { saturation: 0 }, { lightness: 100 }, { visibility: "off" }] }, { featureType: "administrative", elementType: "all", stylers: [{ hue: "#3a3935" }, { saturation: 5 }, { lightness: -57 }, { visibility: "off" }] }, { featureType: "poi.medical", elementType: "geometry", stylers: [{ hue: "#cba923" }, { saturation: 50 }, { lightness: -46 }, { visibility: "on" }] }], Beard: [{ featureType: "poi.business", elementType: "labels.text", stylers: [{ visibility: "on" }, { color: "#333333" }] }], AssassianCreed: [{ featureType: "all", elementType: "all", stylers: [{ visibility: "on" }] }, { featureType: "all", elementType: "labels", stylers: [{ visibility: "off" }, { saturation: "-100" }] }, { featureType: "all", elementType: "labels.text.fill", stylers: [{ saturation: 36 }, { color: "#000000" }, { lightness: 40 }, { visibility: "off" }] }, { featureType: "all", elementType: "labels.text.stroke", stylers: [{ visibility: "off" }, { color: "#000000" }, { lightness: 16 }] }, { featureType: "all", elementType: "labels.icon", stylers: [{ visibility: "off" }] }, { featureType: "administrative", elementType: "geometry.fill", stylers: [{ color: "#000000" }, { lightness: 20 }] }, { featureType: "administrative", elementType: "geometry.stroke", stylers: [{ color: "#000000" }, { lightness: 17 }, { weight: 1.2 }] }, { featureType: "landscape", elementType: "geometry", stylers: [{ color: "#000000" }, { lightness: 20 }] }, { featureType: "landscape", elementType: "geometry.fill", stylers: [{ color: "#4d6059" }] }, { featureType: "landscape", elementType: "geometry.stroke", stylers: [{ color: "#4d6059" }] }, { featureType: "landscape.natural", elementType: "geometry.fill", stylers: [{ color: "#4d6059" }] }, { featureType: "poi", elementType: "geometry", stylers: [{ lightness: 21 }] }, { featureType: "poi", elementType: "geometry.fill", stylers: [{ color: "#4d6059" }] }, { featureType: "poi", elementType: "geometry.stroke", stylers: [{ color: "#4d6059" }] }, { featureType: "road", elementType: "geometry", stylers: [{ visibility: "on" }, { color: "#7f8d89" }] }, { featureType: "road", elementType: "geometry.fill", stylers: [{ color: "#7f8d89" }] }, { featureType: "road.highway", elementType: "geometry.fill", stylers: [{ color: "#7f8d89" }, { lightness: 17 }] }, { featureType: "road.highway", elementType: "geometry.stroke", stylers: [{ color: "#7f8d89" }, { lightness: 29 }, { weight: .2 }] }, { featureType: "road.arterial", elementType: "geometry", stylers: [{ color: "#000000" }, { lightness: 18 }] }, { featureType: "road.arterial", elementType: "geometry.fill", stylers: [{ color: "#7f8d89" }] }, { featureType: "road.arterial", elementType: "geometry.stroke", stylers: [{ color: "#7f8d89" }] }, { featureType: "road.local", elementType: "geometry", stylers: [{ color: "#000000" }, { lightness: 16 }] }, { featureType: "road.local", elementType: "geometry.fill", stylers: [{ color: "#7f8d89" }] }, { featureType: "road.local", elementType: "geometry.stroke", stylers: [{ color: "#7f8d89" }] }, { featureType: "transit", elementType: "geometry", stylers: [{ color: "#000000" }, { lightness: 19 }] }, { featureType: "water", elementType: "all", stylers: [{ color: "#2b3638" }, { visibility: "on" }] }, { featureType: "water", elementType: "geometry", stylers: [{ color: "#2b3638" }, { lightness: 17 }] }, { featureType: "water", elementType: "geometry.fill", stylers: [{ color: "#24282b" }] }, { featureType: "water", elementType: "geometry.stroke", stylers: [{ color: "#24282b" }] }, { featureType: "water", elementType: "labels", stylers: [{ visibility: "off" }] }, { featureType: "water", elementType: "labels.text", stylers: [{ visibility: "off " }] }, { featureType: "water", elementType: "labels.text.fill", stylers: [{ visibility: "off" }] }, { featureType: "water", elementType: "labels.text.stroke", stylers: [{ visibility: "off" }] }, { featureType: "water", elementType: "labels.icon", stylers: [{ visibility: "off" }] }], SubtleGray: [{ featureType: "administrative", elementType: "all", stylers: [{ saturation: "-100" }] }, { featureType: "administrative.province", elementType: "all", stylers: [{ visibility: "off" }] }, { featureType: "landscape", elementType: "all", stylers: [{ saturation: -100 }, { lightness: 65 }, { visibility: "on" }] }, { featureType: "poi", elementType: "all", stylers: [{ saturation: -100 }, { lightness: "50" }, { visibility: "simplified" }] }, { featureType: "road", elementType: "all", stylers: [{ saturation: -100 }] }, { featureType: "road.highway", elementType: "all", stylers: [{ visibility: "simplified" }] }, { featureType: "road.arterial", elementType: "all", stylers: [{ lightness: "30" }] }, { featureType: "road.local", elementType: "all", stylers: [{ lightness: "40" }] }, { featureType: "transit", elementType: "all", stylers: [{ saturation: -100 }, { visibility: "simplified" }] }, { featureType: "water", elementType: "geometry", stylers: [{ hue: "#ffff00" }, { lightness: -25 }, { saturation: -97 }] }, { featureType: "water", elementType: "labels", stylers: [{ lightness: -25 }, { saturation: -100 }] }], Tripitty: [{ featureType: "all", elementType: "labels", stylers: [{ visibility: "off" }] }, { featureType: "administrative", elementType: "all", stylers: [{ visibility: "off" }] }, { featureType: "landscape", elementType: "all", stylers: [{ color: "#2c5ca5" }] }, { featureType: "poi", elementType: "all", stylers: [{ color: "#2c5ca5" }] }, { featureType: "road", elementType: "all", stylers: [{ visibility: "off" }] }, { featureType: "transit", elementType: "all", stylers: [{ visibility: "off" }] }, { featureType: "water", elementType: "all", stylers: [{ color: "#193a70" }, { visibility: "on" }] }], Cobalt: [{ featureType: "all", elementType: "all", stylers: [{ invert_lightness: !0 }, { saturation: 10 }, { lightness: 30 }, { gamma: .5 }, { hue: "#435158" }] }] }; a.forEach(function (a) { var d = utils.getData(a, "latlng").split(","), g = a.innerHTML, h = utils.getData(a, "icon") ? utils.getData(a, "icon") : "https://maps.gstatic.com/mapfiles/api-3/images/spotlight-poi.png", e = utils.getData(a, "zoom"), f = a, i = utils.getData(a, "theme"); if ("streetview" === utils.getData(a, "theme")) { var j = utils.getData(a, "pov"), k = { position: { lat: Number(d[0]), lng: Number(d[1]) }, pov: j, zoom: e, gestureHandling: "none", scrollwheel: !1 }; return new window.google.maps.StreetViewPanorama(f, k) } var l = { zoom: e, scrollwheel: utils.getData(a, "scrollwheel"), center: new window.google.maps.LatLng(d[0], d[1]), styles: "dark" === localStorage.getItem("theme") ? c.Cobalt : c[i] }, m = new window.google.maps.Map(f, l), o = new window.google.maps.InfoWindow({ content: g }), n = new window.google.maps.Marker({ position: new window.google.maps.LatLng(d[0], d[1]), icon: h, map: m }); return n.addListener("click", function () { o.open(m, n) }), b && b.addEventListener("clickControl", function (b) { var a = b.detail, d = a.control, e = a.value; "theme" === d && m.set("styles", "dark" === e ? c.Cobalt : c[i]) }), null }) } } var lightboxInit = function () { window.BigPicture && document.querySelectorAll("[data-bigpicture]").forEach(function (a) { var b = utils.getData(a, "bigpicture"), c = window._.merge({ el: a }, b); a.addEventListener("click", function () { window.BigPicture(c) }) }) }, cookieNoticeInit = function () { var a = { NOTICE: ".notice", DATA_TOGGLE_NOTICE: '[data-bs-toggle="notice"]' }, c = { CLICK: "click", HIDDEN_BS_TOAST: "hidden.bs.toast" }, e = { OPTIONS: "options" }, f = { HIDE: "hide" }, d = document.querySelectorAll(a.NOTICE), g = !0; d.forEach(function (a) { var i = new window.bootstrap.Toast(a), b = _objectSpread({ autoShow: !1, autoShowDelay: 0, showOnce: !1, cookieExpireTime: 36e5, autohide: !1 }, utils.getData(a, e.OPTIONS)), d = b.showOnce, f = b.autoShow, h = b.autoShowDelay; d && (g = null === utils.getCookie("notice")), f && g && setTimeout(function () { i.show() }, h), a.addEventListener(c.HIDDEN_BS_TOAST, function (b) { var c = b.currentTarget, a = _objectSpread({ cookieExpireTime: 36e5, showOnce: !1, autohide: !1 }, utils.getData(c, e.OPTIONS)); a.showOnce && utils.setCookie("notice", !1, a.cookieExpireTime) }) }); var b = document.querySelector(a.DATA_TOGGLE_NOTICE); b && b.addEventListener(c.CLICK, function (b) { var c = b.currentTarget.getAttribute("href"), a = new window.bootstrap.Toast(document.querySelector(c)), d = a._element; utils.hasClass(d, f.HIDE) ? a.show() : a.hide() }) }, plyrInit = function () { window.Plyr && document.querySelectorAll("[data-plyr]").forEach(function (a) { var b = utils.getData(a, "plyr"), c = window._.merge({ captions: { active: !0 } }, b); return new window.Plyr(a, c) }) }, popoverInit = function () { [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]')).map(function (a) { return new window.bootstrap.Popover(a) }) }, preloaderInit = function () { var a = document.querySelector("body"); window.imagesLoaded(a, function () { var a = document.querySelector(".preloader"); null == a || a.classList.add("loaded"), setTimeout(function () { null == a || a.remove() }, 800) }) }, progressBarInit = function () { var a = { DATA_PROGRESS_CIRCLE: "[data-progress-circle]", DATA_PROGRESS_LINE: "[data-progress-line]" }, d = { SCROLL: "scroll" }, e = window._.merge, b = document.querySelectorAll(a.DATA_PROGRESS_CIRCLE); b.length && b.forEach(function (a) { var b = utils.getData(a, "progress-circle"), c = e({ strokeWidth: 2, trailWidth: 2, easing: "easeInOut", duration: 3e3, svgStyle: { "stroke-linecap": "round", display: "block", width: "100%" }, text: { autoStyleContainer: !1 }, from: { color: "#aaa", width: 2 }, to: { color: "#333", width: 2 }, step: function (c, a) { a.path.setAttribute("stroke", c.color), a.path.setAttribute("stroke-width", c.width); var d = Math.round(100 * a.value()); a.setText("<span class='value'>".concat(d, "<b>%</b></span> <span>").concat(b.subText || "", "</span>")) } }, b), f = new ProgressBar.Circle(a, c); f.svg.insertAdjacentHTML("beforeEnd", '<defs>\n        <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="0%" gradientUnits="userSpaceOnUse">\n          <stop offset="0%" stop-color=\'#1970e2\' />\n          <stop offset="100%" stop-color=\'#4695ff\' />\n        </linearGradient>\n      </defs>'); var h = !1, g = function () { return !h && utils.isElementIntoView(a) && (f.animate(c.progress / 100), h = !0), h }; g(), window.addEventListener(d.SCROLL, function () { g() }), document.body.addEventListener("clickControl", function (a) { "theme" !== a.detail.control || (f.trail.setAttribute("stroke", utils.getGrays()["200"]), f.path.getAttribute("stroke").includes("url") || f.path.setAttribute("stroke", utils.getGrays()["400"])) }) }); var c = document.querySelectorAll(a.DATA_PROGRESS_LINE); c.length && c.forEach(function (a) { var b = utils.getData(a, "progress-line"), c = e({ strokeWidth: 1, easing: "easeInOut", duration: 3e3, trailWidth: 1, color: "#333", svgStyle: { width: "100%", height: "0.25rem", "stroke-linecap": "round", "border-radius": "0.125rem" }, text: { style: { transform: null }, autoStyleContainer: !1 }, step: function (c, a) { a.setText("<span class='value'>".concat(Math.round(100 * a.value()), "<b>%</b></span> <span>").concat(b.subText, "</span>")) } }, b), g = new ProgressBar.Line(a, c), h = !1, f = function () { return !h && utils.isElementIntoView(a) && (g.animate(c.progress / 100), h = !0), h }; f(), window.addEventListener(d.SCROLL, function () { f() }) }) }, rellaxInit = function () { return window.Rellax && new window.Rellax("[data-parallax]", {}) }, swiperInit = function () { var a = { DATA_SWIPER: "[data-swiper]", DATA_ZANIM_TIMELINE: "[data-zanim-timeline]", IMG: "img", SWIPER_NAV: ".swiper-nav", SWIPER_BUTTON_NEXT: ".swiper-button-next", SWIPER_BUTTON_PREV: ".swiper-button-prev" }, b = { SWIPER: "swiper" }, c = { SLIDE_CHANGE: "slideChange" }; document.querySelectorAll(a.DATA_SWIPER).forEach(function (d) { var h, i = utils.getData(d, b.SWIPER), f = i.thumb; if (f) { var j = d.querySelectorAll(a.IMG), k = ""; j.forEach(function (a) { k += "\n          <div class='swiper-slide '>\n            <img class='img-fluid rounded mt-1' src=".concat(a.src, " alt=''/>\n          </div>\n        ") }); var e = document.createElement("div"); (e.setAttribute("class", "swiper-container thumb"), e.innerHTML = "<div class='swiper-wrapper'>".concat(k, "</div>"), f.parent) ? document.querySelector(f.parent).parentNode.appendChild(e) : d.parentNode.appendChild(e), h = new window.Swiper(e, f) } var g = d.querySelector(a.SWIPER_NAV), l = new window.Swiper(d, _objectSpread(_objectSpread({}, i), {}, { navigation: { nextEl: null == g ? void 0 : g.querySelector(a.SWIPER_BUTTON_NEXT), prevEl: null == g ? void 0 : g.querySelector(a.SWIPER_BUTTON_PREV) }, thumbs: { swiper: h } })); d && l.on(c.SLIDE_CHANGE, function () { d.querySelectorAll(a.DATA_ZANIM_TIMELINE).forEach(function (a) { window.zanimation(a, function (a) { setTimeout(function () { a.play() }, 1200) }) }) }) }) }, tooltipInit = function () { [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]')).map(function (a) { return new window.bootstrap.Tooltip(a, { trigger: "hover" }) }) }, typedTextInit = function () { var a = document.querySelectorAll("[data-typed-text]"); a.length && window.Typed && a.forEach(function (a) { return new window.Typed(a, { strings: utils.getData(a, "typed-text"), typeSpeed: 100, loop: !0, backDelay: 1500 }) }) }; CustomEase.create("CubicBezier", ".77,0,.18,1"); var filterBlur = function () { var a = "blur(5px)"; return (window.is.ios() || window.is.mac()) && window.is.firefox() && (a = "blur(0px)"), a }, zanimationEffects = { default: { from: { opacity: 0, y: 70 }, to: { opacity: 1, y: 0 }, ease: "CubicBezier", duration: .8, delay: 0 }, "slide-down": { from: { opacity: 0, y: -70 }, to: { opacity: 1, y: 0 }, ease: "CubicBezier", duration: .8, delay: 0 }, "slide-left": { from: { opacity: 0, x: 70 }, to: { opacity: 1, x: 0 }, ease: "CubicBezier", duration: .8, delay: 0 }, "slide-right": { from: { opacity: 0, x: -70 }, to: { opacity: 1, x: 0 }, ease: "CubicBezier", duration: .8, delay: 0 }, "zoom-in": { from: { scale: .9, opacity: 0, filter: filterBlur() }, to: { scale: 1, opacity: 1, filter: "blur(0px)" }, delay: 0, ease: "CubicBezier", duration: .8 }, "zoom-out": { from: { scale: 1.1, opacity: 1, filter: filterBlur() }, to: { scale: 1, opacity: 1, filter: "blur(0px)" }, delay: 0, ease: "CubicBezier", duration: .8 }, "zoom-out-slide-right": { from: { scale: 1.1, opacity: 1, x: -70, filter: filterBlur() }, to: { scale: 1, opacity: 1, x: 0, filter: "blur(0px)" }, delay: 0, ease: "CubicBezier", duration: .8 }, "zoom-out-slide-left": { from: { scale: 1.1, opacity: 1, x: 70, filter: filterBlur() }, to: { scale: 1, opacity: 1, x: 0, filter: "blur(0px)" }, delay: 0, ease: "CubicBezier", duration: .8 }, "blur-in": { from: { opacity: 0, filter: filterBlur() }, to: { opacity: 1, filter: "blur(0px)" }, delay: 0, ease: "CubicBezier", duration: .8 } }; utils.isRTL() && Object.keys(zanimationEffects).forEach(function (a) { zanimationEffects[a].from.x && (zanimationEffects[a].from.x = -zanimationEffects[a].from.x) }); var zanimation = function (a, c) { var g, d = { DATA_ZANIM_TIMELINE: "[data-zanim-timeline]", DATA_KEYS: "[data-zanim-xs], [data-zanim-sm], [data-zanim-md], [data-zanim-lg], [data-zanim-xl]" }, h = { DATA_ZANIM_TRIGGER: "data-zanim-trigger" }, i = utils.getCurrentScreenBreakpoint().currentBreakpoint, j = utils.getCurrentScreenBreakpoint().breakpointStartVal, e = function (c) { var b = {}, a = {}; if (c.hasAttribute("data-zanim-".concat(i))) g = "zanim-".concat(i); else { var d = []; if (c.getAttributeNames().forEach(function (a) { if (a !== h.DATA_ZANIM_TRIGGER && a.startsWith("data-zanim-")) { var b = a.split("data-zanim-")[1]; utils.breakpoints[b] < j && d.push({ name: b, size: utils.breakpoints[b] }) } }), g = void 0, 0 !== d.length) { var f = (d = d.sort(function (a, b) { return a.size - b.size })).pop(); g = "zanim-".concat(f.name) } } var e = utils.getData(c, g); return a = window._.merge(b, e), void 0 !== g && (b = e.animation ? zanimationEffects[e.animation] : zanimationEffects.default), void 0 === g && (b = { delay: 0, duration: 0, ease: "Expo.easeOut", from: {}, to: {} }), a.delay || (a.delay = b.delay), a.duration || (a.duration = b.duration), a.from || (a.from = b.from), a.to || (a.to = b.to), a.ease ? a.to.ease = a.ease : a.to.ease = b.ease, a }; if (a.hasAttribute("data-zanim-timeline")) { var f = utils.getData(a, "zanim-timeline"), k = gsap.timeline(f); a.querySelectorAll(d.DATA_KEYS).forEach(function (b) { var a = e(b); k.fromTo(b, a.duration, a.from, a.to, a.delay).pause(), window.imagesLoaded(b, c(k)) }) } else if (!a.closest(d.DATA_ZANIM_TIMELINE)) { var b = e(a); c(gsap.fromTo(a, b.duration, b.from, b.to).delay(b.delay).pause()) } c(gsap.timeline()) }, zanimationInit = function () { var b = { DATA_ZANIM_TRIGGER: "[data-zanim-trigger]", DATA_ZANIM_REPEAT: "[zanim-repeat]" }, c = { DATA_ZANIM_TRIGGER: "data-zanim-trigger" }, a = function () { document.querySelectorAll(b.DATA_ZANIM_TRIGGER).forEach(function (a) { utils.isElementIntoView(a) && a.hasAttribute(c.DATA_ZANIM_TRIGGER) && (zanimation(a, function (a) { return a.play() }), document.querySelector(b.DATA_ZANIM_REPEAT) || a.removeAttribute(c.DATA_ZANIM_TRIGGER)) }) }; a(), window.addEventListener("scroll", function () { return a() }) }, gsapAnimation = { zanimationInit: zanimationInit, zanimation: zanimation }; docReady(fancyNavInit), docReady(initMap), docReady(rellaxInit), docReady(isotopeInit), docReady(zanimationInit), docReady(swiperInit), docReady(drawSvgInit), docReady(lightboxInit), docReady(preloaderInit)